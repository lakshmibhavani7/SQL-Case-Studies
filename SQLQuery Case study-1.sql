--CASE STUDY-1

SELECT * FROM Location
SELECT * FROM Product
SELECT * FROM fact

---1.. Display the number of states present in the LocationTableselect count(distinct state) as count_state from location--2.How many products are of regular type?SELECT COUNT(*) AS REGULAR_TYPE FROM Product WHERE TYPE ='REGULAR'--3.How much spending has been done on marketing of product ID 1?SELECT SUM(MARKETING) AS TOT_SPENDING FROM fact WHERE ProductId=1--4. What is the minimum sales of a product?SELECT MIN(SALES) AS MIN_SALES FROM fact--5. Display the max Cost of Good Sold (COGS).SELECT MAX(COGS) AS MAX_COGS FROM fact--6. Display the details of the product where product type is coffee. SELECT * FROM Product WHERE Product_Type = 'COFFEE'--7. Display the details where total expenses are greater than 40. SELECT * FROM fact WHERE Total_Expenses>40--8. What is the average sales in area code 719?SELECT AVG(SALES) AS AVG_SALES FROM fact WHERE Area_Code = 719select avg(sales) as averagesales from fact group by Area_Code having Area_Code=719--9. Find out the total profit generated by Colorado state.select sum(Profit) as total_profit from factjoinLocationon fact.Area_Code=Location.Area_Codewhere State='Colorado'--10. Display the average inventory for each product ID.SELECT ProductId,AVG(INVENTORY) AS AVG_INVENTORY FROM factGROUP BY ProductId--11. Display state in a sequential order in a Location Table. SELECT * FROM Location ORDER BY State--12. Display the average budget of the Product where the average budget margin should be greater than 100.select ProductId,avg(Budget_Margin) as avg_bm from factgroup by ProductIdhaving avg( Budget_Margin)>100--13. What is the total sales done on date 2010-01-01?SELECT SUM(SALES) AS TOT_SALES FROM fact WHERE DATE ='2010-01-01'--14. Display the average total expense of each product ID on an individual date.SELECT PRODUCTID,DATE,AVG(TOTAL_EXPENSES) AS AVG_EXPENSES FROM factGROUP BY PRODUCTID,DATE--15. Display the table with the following attributes such as date, productID, product_type,--product, sales, profit, state, area_codeselect Date,fact.ProductId,Product_Type,Product,Sales,Profit,state,fact.Area_Code from factjoin Locationon fact.Area_Code=Location.Area_Codejoin Producton fact.ProductId=Product.ProductId--16. Display the rank without any gap to show the sales wise rank.SELECT *, DENSE_RANK() OVER(ORDER BY SALES DESC) AS SALESWISE_RANKING FROM fact--17. Find the state wise profit and sales. select State,SUM(PROFIT) AS PROFIT,SUM(SALES) AS TOTAL_SALES from factjoin Locationon fact.Area_Code=Location.Area_CodeGROUP BY State--18. Find the state wise profit and sales along with the productname.select state,Product,sum(Profit) as profit,sum(sales) as totalsales from factjoin Locationon fact.Area_Code=Location.Area_Codejoin Producton fact.ProductId=Product.ProductIdgroup by state,ProductORDER BY STATE--19. If there is an increase in sales of 5%, calculate the increased sales.SELECT Sales, Sales+Sales*0.05 AS INCREASEDSALES FROM factSELECT Sales, Sales*1.05 AS INCREASEDSALES FROM fact--20. Find the maximum profit along with the product ID and product type. SELECT P.ProductId, P.product_type, F.Profit FROM Product P
JOIN fact F ON P.ProductId = F.ProductId
ORDER BY F.Profit DESC
--21. Create a stored procedure to fetch the result according to the product type from Product Table. CREATE PROCEDURE PR_002
AS
BEGIN
    SELECT Product_Type FROM Product
    WHERE product_type = Product_Type;
ENDEXEC PR_002--22. Write a query by creating a condition in which if the total expenses is less than 60 then it is a profit or else loss. SELECT Total_Expenses, IIF(Total_Expenses< 60, 'PROFIT', 'LOSS') AS TOTAL_EXPENSES_STATUS FROM fact--23. Give the total weekly sales value with the date and product ID details. Useroll-up to pull the data in hierarchical order.SELECT DATE, ProductId, DATEPART(WEEK,DATE) AS WK_DATE, SUM(Sales) AS TOTAL_SALES  FROM factGROUP BY ROLLUP(DATE, ProductId, DATEPART(WEEK,DATE))
SELECT * FROM fact
--24. Apply union and intersection operator on the tables which consist of attribute area code.SELECT Area_Code FROM factUNIONSELECT Area_Code FROM factSELECT Area_Code FROM factINTERSECTSELECT Area_Code FROM fact--25. Create a user-defined function for the product table to fetch a particular product type based upon the user’s preference.CREATE FUNCTION FUN_001(@X VARCHAR(50))
RETURNS TABLE
AS
RETURN
(
    SELECT * FROM Product WHERE product_type = @X
)

SELECT * FROM DBO.FUN_001('TEA')
                          --26. Change the product type from coffee to tea where product IDis 1 and undo it.UPDATE Product SET Product_Type = 'TEA' WHERE ProductId = '1'
SELECT * FROM PRODUCT
-- set back to coffee
UPDATE Product SET Product_Type = 'Coffee' WHERE ProductId = '1'
--27. Display the date, product ID and sales where total expenses are between 100 to 200.SELECT Date,ProductId,Sales,Total_Expenses FROM fact WHERE Total_Expenses BETWEEN 100 AND 200
--28. Delete the records in the Product Table for regular type.DELETE FROM Product WHERE Type ='REGULAR'--29. Display the ASCII value of the fifth character from the column ProductSELECT ASCII(SUBSTRING(Product, 5, 1)) AS ASC_VALUE FROM Product
